{"componentChunkName":"component---src-templates-lesson-js","path":"/egl-model/05/","result":{"data":{"allMarkdownRemark":{"nodes":[{"frontmatter":{"length":11,"author":"Kion","slug":"egl-model","source":"https://github.com/kion-dgl/DashGL-EGL-Model-Tutorial/tree/master/05_multiple","title":"Multiple Shapes","index":5},"html":"<p>Okay, now that we have a geneal idea of the basic pattern of how we bind buffers\nand and then fit those buffers to attributes to be drawn on the screen. Now we\nmight as well take the oppertunity to make multiple draw calls. There's really not\nmuch to it, we generally repeat the same pattern four times. We bind four buffers,\nand then repeat the same draw call each time for each buffer to draw each shape.</p>\n<p>There really isn't that much too it, but what often happens with these tutorials is\nthat only one shape ends up being gone so you're not provided with any context for\nhow to scale up and what happens and how you're supposed to do that. And to be honest\nthis is only one of the ways you can do this. In each case we need to bind another\nbuffer before we can set the attributes and make the draw calls. We can actually bind\nall of the shapes to a single buffer, and that way we only need to set the buffer\nand attributes and then draw four calls, one for each shape at a specific offset of\nthe buffer.</p>\n<p>We also might as well take the oppertunity to talk about vertex color while we're here.\nWe've been setting the color of each shape using vertex color, and that's generally the\napproach of defining the color in the buffer and then using that as an attribute to\ndefine the color. This is a pretty easy way to do things. But we can also take the approach\nof defninig a uniform.  A uniform is a value that stays static until it's updated by\nthe CPU side of things.</p>\n<p>So say we have a vec3 uniform that we set as \"red\", then the uniform will be red for\nevery shape we draw, and all of the colors will be red. And then if we set it to blue\nthen all of the colors we draw will be blue until we update it again. There's a whole\ncan of worms involved in terms of best practices and performance. But right now since\nwe're working on basics and don't have to worry about performance too much, the\nfocus is on providing context for what options are available and how to implement them\nand then worry about best practices when angry people on the internet yell at us.</p>"}]},"allTutorialsJson":{"nodes":[{"lessons":[{"index":0,"title":"Introduction"},{"index":1,"title":"Blue Triangle"},{"index":2,"title":"Red Square"},{"index":3,"title":"Green Circle"},{"index":4,"title":"Fragment Shader"},{"index":5,"title":"Multiple Shapes"},{"index":6,"title":"Fade in and Out"},{"index":7,"title":"Transform Triangle"},{"index":8,"title":"Draw a Cube"},{"index":9,"title":"Textured Cube"},{"index":10,"title":"Render Model"}]}]}},"pageContext":{"slug":"egl-model","index":5}},"staticQueryHashes":[]}