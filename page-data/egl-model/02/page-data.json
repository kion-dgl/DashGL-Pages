{"componentChunkName":"component---src-templates-lesson-js","path":"/egl-model/02/","result":{"data":{"allMarkdownRemark":{"nodes":[{"frontmatter":{"length":11,"author":"Kion","slug":"egl-model","source":"https://github.com/kion-dgl/DashGL-EGL-Model-Tutorial/tree/master/02_square","title":"Red Square","index":2},"html":"<p>I guess in this tutorial we can start talking about the actual OpenGL aspect of\nworking with these tutorials. But before that we have some code to clean up, so\nwe're going to move the <code>init_ogl</code> code to a header file and try to clean up\nthe code that we're looking attry and make things simpler. So we're going to create\na directory called <code>lib</code> and then create a <code>dashgl.c</code> and a <code>dashgl.h</code>.\nIn general I should explain there is no <em>official</em> dashgl library, it's more something\nthat I use as a name for tutorials, but maybe someday there could be a <code>apt-get install lib_dashgl</code> and that install a specific script to /usr/lib or something and\nthat would be pretty cool.</p>\n<p>As for the actual OpenGL stuff in this tutorial, it would probably make sense to talk\nabout the shaders. Shaders is kind of a weird word when you first hear it. In general\nit's a pretty good idea to point out that there's no special sauce that we're doing\non the GPU. For 3d graphics, it's basically a bunch of matrix mulitplication, so there's\nnothing that says you can't do it all on the CPU and in general up to the mid-90's this\nwas generally the way everything was done. The problem is you run your game logic on\nthe cpu, and then you take a ton of cycles on the cpu dedicated to just multiplying\nmatrices to draw things on the screen and start the name frame.</p>\n<p>So in general we're not doing anything special on the GPU, more like offloading what\nwe would be doing on the CPU to the GPU. To do that we need to first share the\ninformation that the CPU has access to the GPU, this is what we do when be bind\nbuffers, we take the vertex information and store it in a place where the GPU\nhas access to. We get back a buffer index, so when the CPU needs to tell the GPU\nto run a draw call, we can say \"use these here to do this\".</p>\n<p>For the \"hey do this\" part, we use shaders. Shaders are basically a program that\nruns on the GPU that defines how an area of memory should be colored in or \"shaded\",\nthus the term shaders. It's a litter weird to get familiar to hearing the term\nin this context, but if you're reading this tutorial there's a good chance you're\nalready familiar with it, and that just me being crazy.</p>\n<p>So next we need to go over how stuff actually gets drawn onto the screen. The easiest\nway to think of this as a image. So if the screen is 800x400 then we basically have a\n800x400 image, that gets populated with stuff that we tell the GPU to draw on top of\nit every frame. By default the coordinates are set from -1 to 1 going from left to right\nand from 1 to -1 going from up to down. So we when we tell the GPU to draw something we\nmap it onto these coordinates. That's why our \"square\" ends up looking like a rectangle.</p>\n<p>What this implies is what you were wondering, \"what, I thought OpenGL was an API for\ndrawing a 3d context?\". And the answer is that it both is and it isn't. That is to\nsay OpenGL is primarily an API for offloading calculations from the CPU to the GPU\nin order to draw on the screen. The way we do that is telling the GPU to do matrix\ncalculations which defines where coordinates to be drawn on the screen. So this tutorial\nwill define how to use shaders to draw a simple 3d context.</p>\n<p>And lastly when drawing we use triangles. Which we will cover in future tutorials.\nAnd if you're thinking, well what about quads? The answer is quads are stupid,\nwe use triangles. More on why in the next tutorial.</p>"}]},"allTutorialsJson":{"nodes":[{"lessons":[{"index":0,"title":"Introduction"},{"index":1,"title":"Blue Triangle"},{"index":2,"title":"Red Square"},{"index":3,"title":"Green Circle"},{"index":4,"title":"Fragment Shader"},{"index":5,"title":"Multiple Shapes"},{"index":6,"title":"Fade in and Out"},{"index":7,"title":"Transform Triangle"},{"index":8,"title":"Draw a Cube"},{"index":9,"title":"Textured Cube"},{"index":10,"title":"Render Model"}]}]}},"pageContext":{"slug":"egl-model","index":2}},"staticQueryHashes":[]}