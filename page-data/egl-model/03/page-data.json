{"componentChunkName":"component---src-templates-lesson-js","path":"/egl-model/03/","result":{"data":{"allMarkdownRemark":{"nodes":[{"frontmatter":{"length":11,"author":"Kion","slug":"egl-model","source":"https://github.com/kion-dgl/DashGL-EGL-Model-Tutorial/tree/master/03_circle","title":"Green Circle","index":3},"html":"<p>So we're now into our third tutorial, and in the first tutorial we drew a\nsingle triangle and there wasn't a lot to go on in terms of describing a\npattern. And then we drew a square, which was two triangles, and anyone\nobservant would probably notice a trend in terms of how the square was\nbeing drawn. In this tutorial we draw a \"circle\" which can be an arbitrary\nnumber of triangles. In this case our \"circle\" is actually an octagon, or\na decagon, or how ever many number of triangles we decide to generate\nfor the number of sides.</p>\n<p>So before we do anything, let's do a quick review for how we're generating\nthe circle. Basically what we're doing is we're drawing a circle by generating\npieces of a pie in a circle. So we make a triangle by starting on the outside\nof the circle, move into the center for the next vertex and then finish the\ntriangle on the outside of the circle. So using a very small number of triangles\nwe ends up with a hexagon or an octagon, and the more triangles that we use\nthe more and more circular the circle will look. Except, we aren't doing anything\nto account for the screen width, so we end up dawing an oval more than anything.</p>\n<p>We can take this oppertunity to review what we're doing for the bind the and draw\nmechanics since an example with arbitrary number of triangles provides a bit of hint.\nWe described the way the circle was drawn for each triangle. We store these triangles\nin a buffer. Each vertex is 3 floats. Each float has a sie of 4 bytes. And each\ntriangle has 3 vertices. So we take the number of triangles, multiply that by\n3 by 3 by 4 and that's the size of the buffer where we save the vertices to the\nbuffer.</p>\n<p>When we goto actually draw our circle, we first need to tell the GPU which program\nwe want it to use. So we first tell it which shader to use, which if it brings up\nthe subject, then yes it is possible to define multiple shaders to for rendering\ndifferent styles for different draw calls. But we don't need to worry about that\ntoo much right now since we only have one shader that we're dealing with. So\nwe tell the GPU which shader that we want it to be using, and then we tell it\nwhich buffer that we want it to use, so we direct it to use the circle vertices\nvertex that we saved earlier.</p>\n<p>Then when we tell the GPU to actually draw the vertex, we need to let the\nGPU know what actually fits into what part of the program. This is probably\na bad explanation, but the way I visualize it is like fitting materia into\narmor slots in final fantasy seven. Like for example for our position we\nhave one armor with three slots, so we put in the materia for x, y, and z\nrespectively in those slots. And then we also have a another piece of armor\nfor color, so we put in the r, g, and b materia into those slots. And then\nsince we have six materia that we want to use at any give time, we need to\nset the stride to fit in the slots for each triangle. I guess this is where\nthe materia analogy kind of breaks down, and becomes more like a string of\nbeads or something. I get the feeling there could be some kind of anal bead\nanalogy that could be explanded on to explain this, but I digress.</p>\n<p>Once we have these elements in place, the shader which describes what we want\nto offload to the GPU, the buffer which provides the GPU with access to\nmemory for the vertices and color information. And then we tell the GPU\nhow the attributes of the position and color are spaced in the buffer, and\nlast we implement the actual draw call by telling the GPU how many triangles we\nwant it to draw. And that results in our weird polygonal oval thing being drawn\non the screen. So we've done single shapes, let's go ahead an try drawing multiple\nshapes in the next tutorial.</p>"}]},"allTutorialsJson":{"nodes":[{"lessons":[{"index":0,"title":"Introduction"},{"index":1,"title":"Blue Triangle"},{"index":2,"title":"Red Square"},{"index":3,"title":"Green Circle"},{"index":4,"title":"Fragment Shader"},{"index":5,"title":"Multiple Shapes"},{"index":6,"title":"Fade in and Out"},{"index":7,"title":"Transform Triangle"},{"index":8,"title":"Draw a Cube"},{"index":9,"title":"Textured Cube"},{"index":10,"title":"Render Model"}]}]}},"pageContext":{"slug":"egl-model","index":3}},"staticQueryHashes":[]}