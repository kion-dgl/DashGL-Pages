{"componentChunkName":"component---src-templates-lesson-js","path":"/egl-model/01/","result":{"data":{"allMarkdownRemark":{"nodes":[{"frontmatter":{"length":11,"author":"Kion","slug":"egl-model","source":"https://github.com/kion-dgl/DashGL-EGL-Model-Tutorial/tree/master/01_triangle","title":"Blue Triangle","index":1},"html":"<p>Okay, so being honest, this tutorial is actually one of the scariest for\nproviding an explanation in how it works. And to provide a parrallel example\nfor why I feel that way is the the classic \"hello world\" example for\nevery programming language. And this is because \"hello world\" is simultaniously\nsimple and complex programs in existence. Syntax-wise the programs are short\nand simple, often not requiring more than five lines and generally only requiring\na single line.</p>\n<p>But it's also very complex in that your brain questions how it's possible. If\nthe computer is breaking text down into something that can be assembled, linked\nand executed. You get this peak into the world below where you get a glimpse of\nassembly, binary, and wonder specifically how the CPU works and how the operating\nsystem works and the massive amount of logic that goes into putting those few\nletters that make up \"hello world\" on the screen. And how does the computer even\nknow what letters look like? And how does it know to place them on the screen and\nwhere?</p>\n<p>So the blue triangle is a similar experience in OpenGL. Syntax-wise there's not a\nlot going on, but there is a lot of code required to get the context set up and\nworking, and you're introduced to shaders, programs, attributes, coordinates that\nOpenGL uses, and the concept of putting information into buffers to be used later.\nAnd to make it worse, there's not a lot of context to work with to provide specific\nexamples of how everything works. So like \"hello world\", it gives you a small peak\ninto the world below. But at the same time, similar to \"hello world\", once you\nare introduced into more examples like \"if else\", then you learn more patterns\nand are able to use the syntax. This is kind of similar to OpenGL as once you start\ngetting into more examples, you might not get a complete understanding of the\nunderlying mechanics, but you will become familiar enough with the mechanics to\nhave a general idea of what's going on and understand the patterns for how to\nmanipulate the API.</p>\n<p>In this tutorial the biggest elephant in the room is the <code>init_ogl</code> function.\nIn that function we have a lot of boiler plate where we start the EGL context\nand get OpenGL to work without a desktop environment. We have a config, a display,\na surface and a context, so we need to at least attempt to try and explain the\nrelationship between these elements. The remaining functions for the init-shaders\nand draw triangles we can probably shove the explanation into tutorial 02.</p>"}]},"allTutorialsJson":{"nodes":[{"lessons":[{"index":0,"title":"Introduction"},{"index":1,"title":"Blue Triangle"},{"index":2,"title":"Red Square"},{"index":3,"title":"Green Circle"},{"index":4,"title":"Fragment Shader"},{"index":5,"title":"Multiple Shapes"},{"index":6,"title":"Fade in and Out"},{"index":7,"title":"Transform Triangle"},{"index":8,"title":"Draw a Cube"},{"index":9,"title":"Textured Cube"},{"index":10,"title":"Render Model"}]}]}},"pageContext":{"slug":"egl-model","index":1}},"staticQueryHashes":[]}