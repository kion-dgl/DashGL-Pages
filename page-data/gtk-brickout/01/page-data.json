{"componentChunkName":"component---src-templates-lesson-js","path":"/gtk-brickout/01/","result":{"data":{"allMarkdownRemark":{"nodes":[{"frontmatter":{"length":18,"author":"Kion","slug":"gtk-brickout","source":"https://github.com/kion-dgl/DashGL-GTK-Brickout-Tutorial/tree/master/01_Open_a_Window","title":"Open a Window","index":1},"html":"<p><img src=\"https://user-images.githubusercontent.com/25621780/128594082-788b466f-cde6-486f-837c-a88d94dd6fde.png\" alt=\"bricks_001\"></p>\n<p>First we make a quick 'Hello, World!' program. To make sure our environment is set up and working.</p>\n<p>File: main.c</p>\n<pre><code class=\"language-c\">#include &#x3C;gtk/gtk.h>\n\nint main(int argc, char *argv[]) {\n\n   GtkWidget *window;\n\n   gtk_init(&#x26;argc, &#x26;argv);\n\n   window = gtk_window_new(GTK_WINDOW_TOPLEVEL);\n   gtk_window_set_title(GTK_WINDOW(window), \"Brickout Tutorial\");\n   gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);\n   gtk_window_set_default_size(GTK_WINDOW(window), 640, 480);\n   gtk_window_set_type_hint(GTK_WINDOW(window), GDK_WINDOW_TYPE_HINT_UTILITY);\n   g_signal_connect(window, \"destroy\", G_CALLBACK(gtk_main_quit), NULL);\n\n   gtk_widget_show_all(window);\n\n   gtk_main();\n\n   return 0;\n\n}\n</code></pre>\n<p>While there's not much going here, let's try to break down and identify what is happening. I would imagine that most of the syntax\nhere is self-explanitory, but I will try none-the-less. We create a new window with <em>gtk_window_new</em>. We then give the window a\ntitle with <em>gtk_window_set_title</em>. We then define where we want the window to appear on the screen initialially. Where we are using\nGTK_WIN_POS_CENTER, but we will list the other options below.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GTK_WIN_POS_NONE</td>\n<td>No influence is made on placement.</td>\n</tr>\n<tr>\n<td>GTK_WIN_POS_CENTER</td>\n<td>Windows should be placed in the center of the screen.</td>\n</tr>\n<tr>\n<td>GTK_WIN_POS_MOUSE</td>\n<td>Windows should be placed at the current mouse position.</td>\n</tr>\n<tr>\n<td>GTK_WIN_POS_CENTER_ALWAYS</td>\n<td>Keep window centered as it changes size, etc.</td>\n</tr>\n<tr>\n<td>GTK_WIN_POS_CENTER_ON_PARENT</td>\n<td>Center the window on its transient parent (see gtk_window_set_transient_for())</td>\n</tr>\n</tbody>\n</table>\n<p>So basically for an application like this, center makes the most sense. After that we have a function to\nset the hint type. In most cases, this isn't actually needed. This is for added for tiling desktop environments such\nas i3 to keep our application from stretching.</p>\n<p>We call <em>g_signal_connect</em> to completely exit out of the application once the window has been closed. Since GTK doesn't\ncompletely exit the process when the window is closed. We call <em>gtk_widget_show_all</em> to show the window to the user, and\nthen we call <em>gtk_main</em> to start the application.</p>\n<p>Compile</p>\n<pre><code>$ gcc `pkg-config --cflags gtk+-3.0` main.c `pkg-config --libs gtk+-3.0`\n</code></pre>\n<p>Run:</p>\n<pre><code>./a.out\n</code></pre>"}]},"allTutorialsJson":{"nodes":[{"lessons":[{"index":0,"title":"Introduction"},{"index":1,"title":"Open a Window"},{"index":2,"title":"Draw a Triangle"},{"index":3,"title":"Separate Shaders"},{"index":4,"title":"Shader Program"},{"index":5,"title":"Orthagonal Coordinates"},{"index":6,"title":"Draw a Ball"},{"index":7,"title":"Set Ball Position"},{"index":8,"title":"Move a Ball"},{"index":9,"title":"Bounce a Ball"},{"index":10,"title":"Define Ball Struct"},{"index":11,"title":"Draw a Paddle"},{"index":12,"title":"Paddle Uniform Color"},{"index":13,"title":"Keydown Callbacks"},{"index":14,"title":"Paddle Hit Detection"},{"index":15,"title":"Draw Row of Bricks"},{"index":16,"title":"Draw Grid of Bricks"},{"index":17,"title":"Break Some Bricks"}]}]}},"pageContext":{"slug":"gtk-brickout","index":1}},"staticQueryHashes":[]}